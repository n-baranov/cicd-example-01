pipeline {
    agent any

    stages {
		stage ('00-Checkout') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '**']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-git', url: 'git@github.com:n-baranov/copy-laravel-project-master.git']]])
      }
    }
    stage('01-Create-S3-Bucket') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
          credentialsId: 'Jenkins-AWS'
          ]])
          {
            sh """
            export S3_BUCKET_NAME=laravel-tfstate-bucket
            cat <<EOF> script.sh
             #!/bin/bash
             if aws s3 ls "s3://%S3_BUCKET_NAME%" 2>&1 | grep -q 'NoSuchBucket'
             then
                echo "Bucket %S3_BUCKET_NAME% doesn't exist. Creating it..."
                aws s3 mb s3://%S3_BUCKET_NAME% --region=eu-west-3
             sleep 5
             exit
             fi
            """
            sh """bash script.sh"""
          }

        }
      }
      stage('02-Pull-Project-from-GitHub') {
        steps {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
            credentialsId: 'Jenkins-AWS'
            ]])
            {
              sh """if [ -d cicd-example-01 ]; then rm -Rf cicd-example-01; fi"""
              sh """git clone https://github.com/n-baranov/cicd-example-01.git"""
            }

          }
        }
        stage('03-Create-Infrastructure') {
          steps {
            withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',
              accessKeyVariable: 'AWS_ACCESS_KEY_ID',
              secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
              credentialsId: 'Jenkins-AWS'
              ]])
              {
                sh """cd cicd-example-01/ && terraform init"""
                sh """cd cicd-example-01/ && terraform apply --auto-approve"""
                sh """aws eks --region eu-west-3 update-kubeconfig --name eks_cluster_laravel"""
                sh """kubectl apply -f cicd-example-01/manifest.yaml"""
                sh """kubectl get svc laravel-lb"""
                sh """bash -c 'external_ip=""; while [ -z $external_ip ]; do echo "Waiting for end point..."; external_ip=$(kubectl get svc laravel-lb --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}"); [ -z "$external_ip" ] && sleep 10; done; echo "End point ready-" && echo $external_ip; export LARAVEL_ENDPOINT=$external_ip'"""
              }
            }
          }

          stage('04-Healthcheck') {
            steps {
                    sh """sleep 30"""
                    sh """
                    if curl %LARAVEL_ENDPOINT% 2>&1 | grep -q 'laravel'
                    then
                       echo "Port 80 is ok"
                    else
                       echo "Port 80 isn't responding"
                    exit
                    fi
                    """
              }
            }

            stage('05-10-minute-hold') {
              steps {
                    sh """sleep 120"""
                }
              }

          stage('06-Login-And-Delete-K8s-Deployment-HPA-LB') {
            steps {
              withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                credentialsId: 'Jenkins-AWS'
                ]])
                {
                  sh """aws eks --region eu-west-3 update-kubeconfig --name eks_cluster_laravel"""
                  sh """cd cicd-example-01/ && kubectl delete -f manifest.yaml"""
                }

              }
            }
            stage('07-Destroy-Infrastructure') {
              steps {
                withCredentials([[
                  $class: 'AmazonWebServicesCredentialsBinding',
                  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                  credentialsId: 'Jenkins-AWS'
                  ]])
                  {
                    sh """cd cicd-example-01/ && terraform destroy --auto-approve"""
                  }

                }
              }
    }
  }
