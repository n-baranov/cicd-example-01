node {
  withEnv([
    'REGION=eu-west-3',
    'S3_BUCKET_NAME=laravel-tfstate-bucket',
    'EKS_CLUSTER_NAME=eks_cluster_laravel'
    ])
    {

    withCredentials([[
      $class: 'AmazonWebServicesCredentialsBinding',
      accessKeyVariable: 'AWS_ACCESS_KEY_ID',
      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
      credentialsId: 'jenkins-AWS'
      ]])
      {

      stage ('00-Checkout') {
        checkout([$class: 'GitSCM',
        branches: [[name: '**']],
        doGenerateSubmoduleConfigurations: false,
        extensions: [],
        submoduleCfg: [],
        userRemoteConfigs: [[credentialsId: 'jenkins-git',
        url: 'git@github.com:n-baranov/copy-laravel-project-master.git']]])
      }

      stage('01-Clone-CICD-Project-from-GitHub') {
        sh "if [ -d cicd-example-01 ]; then rm -Rf cicd-example-01; fi"
        sh "git clone --branch refactoring https://github.com/n-baranov/cicd-example-01.git"
//       sh "git clone https://github.com/n-baranov/cicd-example-01.git"
      }

      stage('02-Create-S3-Bucket') {
        dir ('cicd-example-01/terraform/bin') {
          sh "bash s3bucket.sh ${env.S3_BUCKET_NAME} ${env.REGION}"
        }
      }

      stage('03-Build-And-Push') {
        dir ('cicd-example-01/docker') {
          sh """
          export AccountId=`aws sts get-caller-identity --query Account --output text`
          docker build -t \$AccountId.dkr.ecr.${env.REGION}.amazonaws.com/php-laravel:latest -f backend.dockerfile .
          aws ecr get-login-password --region ${env.REGION} | docker login --username AWS --password-stdin \$AccountId.dkr.ecr.${env.REGION}.amazonaws.com
          bash bin/push.sh \$AccountId.dkr.ecr.${env.REGION}.amazonaws.com/php-laravel:latest ${env.REGION}
          """
        }
      }

      stage('04-Create-Infrastructure') {
        dir ('cicd-example-01/terraform') {
          sh "terraform init"
          sh "terraform apply --auto-approve"
        }
      }

      stage('05-Kubernetes-Deployment') {
        dir ('cicd-example-01/kubernetes') {
          sh """
          aws eks --region ${env.REGION} update-kubeconfig --name ${env.EKS_CLUSTER_NAME}
          kubectl apply -f manifest.yaml
          """
        }
      }

      stage('06-Healthcheck') {
        sh """
        aws eks --region ${env.REGION} update-kubeconfig --name ${env.EKS_CLUSTER_NAME}
        bash cicd-example-01/kubernetes/bin/endpointwaiting.sh
        export LARAVEL_ENDPOINT=`kubectl get services laravel-lb --output jsonpath='{.status.loadBalancer.ingress[0].hostname}'`
        bash cicd-example-01/healthcheck/healthcheck.sh \$LARAVEL_ENDPOINT
        """
      }

      // stage('07-2-minutes-hold') {
      //   echo "------------ Destruction will be started in 120 seconds ------------"
      //   sleep 1
      //   script {
      //     for (int i = 119; i > 0; i--) {
      //       echo "${i}"
      //       sleep 1
      //     }
      //   }
      // }
      //
      // stage('08-Delete-K8s-Deployment-HPA-LB') {
      //   dir ('cicd-example-01/kubernetes') {
      //     sh """
      //     aws eks --region ${env.REGION} update-kubeconfig --name ${env.EKS_CLUSTER_NAME}
      //     kubectl delete -f manifest.yaml
      //     """
      //   }
      // }
      //
      // stage('09-Destroy-Infrastructure') {
      //   dir ('cicd-example-01/terraform') {
      //     sh """
      //     terraform destroy --auto-approve
      //     if ( docker ps -a -q ); then docker rm -f \$(docker ps -a -q); fi
      //     docker image prune -a -f
      //     """
      //   }
      }
    }
  }
}
